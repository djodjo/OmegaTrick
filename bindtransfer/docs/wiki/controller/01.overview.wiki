* 概要
xFrameworkPXではアクションごとにコントローラーを用意します。
コントローラーはアクションが行う各処理の制御を行います。

&br;

* コントローラーの種類

|~コントローラー名|~概要|
|内部コントローラー|xFrameworkPXが内部的に生成し実行するコントローラー|
|スーパーアクションコントローラー|内部コントローラーの次に実行されるコントローラー|
|グローバルアクションコントローラー|スーパーコントローラーの次に実行されるコントローラー|
|アクションコントローラー|開発者が仮想スクリーンに設置するコントローラー|
|Ajaxコントローラー|アクションコントローラーの代わりに利用できるJavaScript用コントローラー|
|ExtDirectコントローラー|Ext JSのExt.Direct機能用コントローラー|


&br;

* 内部コントローラー
内部コントローラーは、リクエストがあったときにディスパッチャーが直接起動するコントローラーです。コントローラーの機能を拡張するコンポーネントの生成や実行されるアクションに対応するアクションコントローラーの生成、また、アクションコントローラーが使用するモジュール(モデル)の生成などアクションを実行させるための準備とその実行を行います。内部コントローラーの自動生成により、コントローラーが不要なテンプレートページのみの表示などを行う場合、開発者はコントローラーレスでテンプレートを用意し、表示させることができます。また、後にコントローラーを設置することで、ビジネスロジックを付加することも可能になります。

内部コントローラーには以下の2種類があります。

|~コントローラーの種類|~概要|
|Webコントローラー|動作モードがWebモードのときに呼び出される内部コントローラー|
|Consoleコントローラー|動作モードがコンソールモードのときに呼び出される内部コントローラー|

Webサーバーを経由して実行されるコントローラーはWebコントローラーになります。
通常は、このWebコントローラーが内部コントローラーとしてディスパッチャー内で自動的に生成され実行されます。

Webブラウザのタイムアウトする時間内で処理できないような処理、またはCronなどで定期的に実行したい場合に使用されるのが、Consoleコントローラーになります。

開発者は、この２つのコントローラーを意識する必要はなく、ディスパッチャーが自動的に（PHP_SAPI定数を利用した自動識別）PHPの動作モードを判別し内部コントローラーを生成します。




&br;

* スーパーアクションコントローラー
スーパーアクションコントローラーは、スーパーアクションの動作を制御するアクションコントローラーです。

** スーパーアクションコントローラーの設定
webappの直下に''super.pxml''というpxmlファイルを置き、そのファイルに実行させたいアクションコントローラーの設定を記述します。

{{{
<?xml version="1.0" encoding="utf-8"?>
<px>
    <controller>Your Controller</controller>
</px>
}}}

''Your Controller''の部分にコントローラークラス名を記述します。
コントローラークラスファイルは、controllers下に配置します。


&br;

* グローバルアクションコントローラー
グローバルアクションコントローラーは、グローバルアクションの動作を制御するアクションコントローラーです。

** グローバルアクションコントローラーの設定
webappの中にある任意のディレクトリに''global.pxml''というpxmlファイルを置き、そのファイルに実行させたいアクションコントローラーの設定を記述します。
グローバルアクションコントローラーの設定はpxmlファイルを配置したディレクトリ以下の階層にある全アクションコントローラーの実行に対して有効です。
複数の階層にpxmlファイルが存在した場合、実行されるアクションコントローラーがある階層からみて直近の階層にあるpxmlファイルの設定が有効になります。

{{{
<?xml version="1.0" encoding="utf-8"?>
<px>
    <controller>Your Controller</controller>
</px>
}}}

''Your Controller''の部分にコントローラークラス名を記述します。
コントローラークラスファイルは、controllers下に配置します。


&br;

* アクションコントローラー
アクションコントローラーは、アクションの動作を制御するコントローラーです。
開発者が任意でアクションを実装する場合、開発者が作成するコントローラーはこのアクションコントローラーになります。

&br;

* Ajaxコントローラー
xFrameworkPXでJavaScriptコードを送信する場合に使用するコントローラーです。

&br;

* ExtDirectコントローラー
Ext JSのExt.Direct機能を使用するためのコントローラーです。このコントローラーはxFrameworkPXを展開した後、webapp下に初期状態で設置されています。

&br;

* リレーション
コントローラーは、自身にイベントとして他のコントローラーを登録でき、登録したコントローラーをイベントとして実行させることができます。これによりコントローラー同士がリレーションを持ちます。この仕組みを利用することでアクションを組み合わせて新たなアクションを作ることができます。

&br;

* コンポーネント

コンポーネントとは「[[xFrameworkPXについて>#about_01.overview>internal]]」の項目でも説明したとおりコントローラーの機能を拡張するためのクラスライブラリです。
コンポーネントを使用するための定義は、拡張したいコントローラークラスに使用するコンポーネントのクラス名とそれを呼び出すためのバインド名を指定するだけです。
使用するための定義がされたコンポーネントクラスは、コントローラークラスの任意の場所で指定したバインド名を使って呼び出すことができるので、簡単にそのコンポーネントの機能を利用することができます。

また、xFrameworkPXでは標準で以下のコンポーネントを提供しています。

|~コンポーネント名|~バインド名|~説明|
|Mail|Mail|メールを送信するためのコンポーネント|
|PhpSession|Session|PHPによるセッションを使用するためのコンポーネント|
|RapidDrive|RapidDrive|RapidDriveに必要なコントローラーの機能を拡張するコンポーネント|

これら3つのコンポーネントに関してはあらかじめ使用のための定義がされているため、開発者が定義を記述する必要はありません。

''定義の記述方法や、実際にコンポーネントの機能を利用するための記述方法については次の「[[記述方法>#controller_02.format>internal]]」の項目を参照してください。''

* コントローラー実行時に渡される設定について

コントローラーが実行されるときディスパッチャーから次の設定情報が連想配列で渡されてきます。

|~キー名|~設定情報の説明|
|pxconf|xFrameworkPX自体の設定情報。設定の詳細についてはxFrameworkPXについての「[[ディスパッチャー>#about_03.dispatcher>internal]]」の項を参照してください。|
|logconf|ロギングに関する設定情報。設定の詳細についてはユーティリティーの「[[ロギング>#util_02.logging>internal]]」の項を参照してください。|
|dbconf|使用するデータベースに関する設定情報。|
|params|入力された各データ|
