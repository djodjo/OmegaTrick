* 概要
xFrameworkPXではMVCのモデルにあたる部分をモジュールと呼んでいます。
開発者はモジュールクラスを継承して作成したクラスに対してメインロジックなどを実装していきます。

&br;

* データベーステーブルの指定
モジュールにデータベースのテーブルを指定するとモジュールはそのテーブルと1対1で紐づきます。開発者はLiveRecordを使用することでこのテーブルに簡単にアクセスすることができます。

また、HasOneに他のテーブルに紐づけられたモジュールを指定することで複数のテーブルを結合させて使用することができます。

&br;

* ビヘイビア
ビヘイビアとはモジュールの機能を拡張するためのライブラリのことです。
モジュールにビヘイビアを使用するための定義を記述するだけで簡単に使用することができます。
xFrameworkPXは標準で以下のビヘイビアを提供しています。
:LiveRecord|モジュールから簡単にデータベースにアクセスするためのメソッドを提供するユーティリティー

LiveRecordビヘイビアを使用するための設定は必要ありません。

~&br;

* バリデーション
xFrameworkPXには入力データのバリデーションのための仕組みが用意されています。開発者はバリデーションのためのチェック処理を行うメソッドを実装し、
モジュールにバリデーションの設定をするだけで入力データのバリデーションを実現することができます。
バリデーションには''ビルトインバリデーション''と''ユーザバリデーション''の二種類があります。

&br;

** ビルトインバリデーション

xFrameworkPXは標準でいくつかのバリデーションのためのチェック機能を提供しています。これをビルトインバリデーションと呼びます。
ビルトインバリデーションには以下のものがあります。

:Alpha|半角英字チェック
:AlphaNumeric|半角英数字チェック
:BgColor|bgcolorコードチェック
:Date|日付チェック
:Email|メールアドレスチェック
:Hankaku|半角文字チェック（記号、半角スペースを含む半角英数）
:HankakuKana|半角カナチェック
:NotEmpty|空文字チェック
:Number|数字チェック
:Phone|電話番号チェック
:TextLength|文字数チェック
:Url|URL文字列チェック
:Zenkaku|全角チェック
:ZenkakuHira|ひらがなチェック
:ZenkakuKana|全角カナチェック
:ZenkakuNum|全角数字チェック

&br;

** ユーザバリデーション

xFrameworkPXではビルトインバリデーションのほかに開発者が独自にバリデーションを実装することもできます。
バリデーションを独自に実装するにはバリデーションを使用するモジュールのクラスにバリデーション用のメソッドを追加するか、ビヘイビアクラスを作成してバリデーション用のメソッドを実装します。
このときメソッドは必ず「''validate''」という文字で始まる名前にしてください。
