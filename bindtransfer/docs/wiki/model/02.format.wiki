* 記述方法

モジュールを作成するときの記述方法を順を追って説明していきます。

&br;

* 新規モジュールの作成

まずモジュールのクラスは必ずxFrameworkPX_Modelクラスを継承して実装します。モジュールのクラス名をアンダースコア（_）で区切ると、
モジュールを格納するディレクトリ下のディレクトリにクラスを定義したPHPファイルを置くことができます。

開発者はこのモジュールクラスに対して下記の各設定をしていきます。
-~使用テーブルの定義
モジュールで使用するデータベースのテーブル名を設定します。
-~使用バリデーション定義用配列の設定
モジュールで使用するバリデーションを配列で設定します。
-~使用ビヘイビア定義用配列の設定
使用するビヘイビアを配列で設定します。
-~メインロジックの実装
開発者が自由にメインロジックのメソッドを実装できます。

&br;

* 使用テーブルの定義

モジュールで使用するデータベースのテーブルの定義はモジュールクラスの'''usetable'''プロパティに使用するテーブル名を設定します。
使用テーブルを定義することでLiveRecordを使用して定義したテーブルに簡単にアクセスすることができます。
~
データベースを使用しないモジュールはusetableプロパティにfalseを指定します。
もしusetableが未設定の場合はクラス名をもとにテーブル名を決定し、自動的にusetableプロパティへ設定します。

{{{
// falseを指定すると接続情報を自動で生成しません。
public $usetable = false

// モジュールと'tbl_example'テーブルを紐づけます。
public $usetable = 'tbl_example';
}}}

* HasOne設定

モジュールはusetabaleの設定だけではひとつのテーブルからしかデータを取得することができません。
ですがHasOneを設定することで複数のテーブルを結合させてデータの取得をすることができます。

HasOneの設定には以下の二通りがあります。

{{{
// 配列による指定
public $hasOne = array(

    // キー名にはモジュール名かテーブル名を指定します。
    'ExampleModule' => array(

        // JOINのタイプ指定(省略時：INNER)
        // INNER、RIGHT、LEFTの指定をします。３つ以外の指定をした場合はINNERになります。
        'type' => 'INNER',

        // 主キーの設定(省略時: id)
        // 参照先テーブルの主キーのカラム名を設定
        'primaryKey' => 'id',

        // 外部キーの設定(省略時：参照先テーブル名 + id)
        // usetableのどのキーがhasOneで指定したテーブルの主キーを参照しているかの設定
        'foreignKey' => 'example_id'
    )
);

// 文字列による指定
// 結合させたいテーブルに対応したモジュールのモジュール名か結合させたいテーブルのテーブル名を指定します。
// この設定をする場合、usetableの外部キーは「参照先テーブル名 + _id」というカラム名にしてください。
// また、参照先テーブルの主キーのカラム名は「id」にしてください。
public $hasOne = 'ExampleModule';
}}}

&br;

* 使用バリデーションの定義

モジュールで使用するバリデーションの定義はモジュールの'''validators'''プロパティに配列を定義して行います。
配列は入力フィールドをキーに、バリデーション動作設定用のパラメータの配列を要素にします。

ここで定義したバリデーションの実行をさせるには以下のメソッドを実行させます。

{{{ 
// コントローラークラス内でexampleModuleというモジュールクラスのバリデーションを実行させる場合
// $inputDataは入力データ
$this->exampleModule->validation($inputData);

}}}

&br;

* 使用ビヘイビアの定義

モジュールで使用するビヘイビアの定義はモジュールの'''behaviors'''プロパティに配列を定義して行います。
配列はビヘイビアクラスのクラス名からパッケージの指定を除いたものを要素にします。

ビヘイビアを設定することによって、ビヘイビアクラスの中の「bind」で始まる名前のメソッドを、まるでモジュールクラスのメソッドのように呼び出して使用することができます。

&br;

&br;

{{{
// {{{ ビヘイビアクラス

class xFrameworkPX_Model_Behavior_Example extends xFrameworkPX_Model_Behavior
{
    // メソッド名の命名規則： bind + 「メソッド名の先頭1文字を大文字にしたもの」
    // 下記の場合だとモジュールには「exampleMethod」という名前のメソッドが追加されます。
    public function bindExampleMethod() {
        return 'hoge';
    }
}

// }}} 
}}}

{{{
// モジュールクラスに使用ビヘイビアとして上記のビヘイビアクラスが定義されていた場合、
// モジュールクラス内で定義されたメソッドと同じようにexampleMethodを実行させることができます。

// 例：コントローラークラス内から呼出す場合
$this->モジュール名->exampleMethod();

// 例：モジュール内から呼出す場合
$this->exampleMethod();
}}}

&br;

* LiveRecordの使用方法

LiveRecordビヘイビアの使用方法について説明します。

** connectionメソッド

PDOオブジェクトによるコネクションを取得します。

{{{
// connection取得
$this->connection();
}}}

&br;

** driverメソッド

PDOオブジェクトからドライバー名を取得します。

{{{
// ドライバー名取得
$this->driver();
}}}

&br;

** schema

テーブル情報取得

{{{
$filter = array(
    
);

// テーブル情報を取得
$this->schema($filter);
}}}

* 記述例

以下はtbl_exampleテーブルとexampleModule2で使用しているテーブルと結合させて使用するモジュールクラスの記述例です。

{{{
// 下記のクラス名の指定の場合、このクラスを定義したPHPファイルは
// モジュールを格納するディレクトリ下のhogeというディレクトリに置きます。
class hoge_exampleModule {

    // 使用テーブルの定義
    public $usetable = 'tbl_example';

    // hasOne
    public $hasOne = exampleModule2

    // 使用ビヘイビアの定義
    public $behaviors = array('ExampleBehavior');

    public function exampleTest() {
        // メインロジックを実装する
    }
}
}}}
