* ロギング

xFrameworkPXにはログの出力機能があります。出力できるログには以下の種類があります。

-ファイル
-メール
-firePHP

&br;

* ログレベル

ログには重要度によって6つのレベルがあります。開発者はログに出力される情報の重要度に合わせて適切なログレベルのログを出力させる必要があります。
ログレベルは以下の通りです。ログレベルは下にあるものほど高くなっています。

- TRACE
- DEBUG
- INFO
- WARNING
- ERROR
- FATAL

&br;

* チャンネル
開発者はログ出力の際に必ずチャンネルを指定します。(未指定時はデフォルトチャンネルが自動的に選択されます。)
チャンネルごとにログ出力の設定をすることができるので、出力する際に指定するチャンネルを変えるだけで簡単に出力の種類を切り替えることができます。
* 記述方法

ログを使用するときの記述方法を順を追って説明していきます。

&br;

* 設定

設定ファイルを格納するディレクトリ（configs）内にあるlog.pxmlにログファイルの出力に関する設定を記述します。
log.pxmlの記述は以下の通りです。

** ログレベル

{{{<loglevel></loglevel>}}}

上記のタグで出力するログレベルの設定を行います。ログの出力を行う際、ここで設定したレベル以上のログが出力されます。
例えばログレベルにINFOを設定した場合、INFO、WARNING、ERROR、FATALレベルのログが出力され、TRACEとDEBUGは出力されません。

&br;

** 出力チャンネル設定

{{{
<channel>
    <チャンネル名></チャンネル名>
</channel>
}}}

上記の記述で出力チャンネルの有効/無効を設定できます。チャンネル名の部分にはdefaultか任意のチャンネル名を設定します。
チャンネル名にdefaultを指定することでデフォルトチャンネル((ログ出力時、出力チャンネルを指定しなかった場合に自動的に選択されるチャンネル))の設定をすることができます。

&br;

** ログ出力設定

loggersの中でチャンネルを指定し、そのチャンネルの中でloggerを定義して出力の設定を行います。また同一のチャンネルに複数のloggerを定義することが可能です。

{{{<name>クラス名</name>}}}

上記のタグでログ出力で使用するクラス名を指定します。

{{{<path>パス</path>}}}

上記のタグでログ出力で使用するクラスのパスを指定します。

{{{<params></params>}}}

上記のタグでログ出力時、クラスに渡すパラメータを設定します。各クラスのparamsの指定方法については記述例で説明します。

&br;

* ログの出力方法

実際にログを出力させる方法を説明します。ログを出力させるためにはxFrameworkPX_Logクラスのオブジェクトを取得する必要があります。
xFrameworkPXはあらかじめlog.pxmlの設定を読み込んでいるため、ログを出力させたいところでgetInstanceメソッドを使ってオブジェクトを取得して、メソッドを実行するだけでログの出力ができます。
{{{xFrameworkPX_Log::getInstance();}}}

&br;

なおコントローラーのクラス内では以下の方法でもオブジェクトを呼び出すことができます。

{{{$this->log}}}

xFrameworkPX_Logクラスにはログレベルごとに出力用のメソッドが用意されており、それぞれ実行させることで対応したログレベルでログを出力させることができます。
{{{

// TRACEレベルログ出力用メソッド
$this->log->trace('メッセージ', 'チャンネル');

// DEBUGレベルログ出力用メソッド
$this->log->debug('メッセージ', 'チャンネル');

// INFOレベルログ出力用メソッド
$this->log->info('メッセージ', 'チャンネル');

// WARNINGレベルログ出力用メソッド
$this->log->warning('メッセージ', 'チャンネル');

// ERRORレベルログ出力用メソッド
$this->log->error('メッセージ', 'チャンネル');

// FATALレベルログ出力用メソッド
$this->log->fatal('メッセージ', 'チャンネル');

}}}

このメソッドのチャンネル指定を省略するとデフォルトチャンネルでログを出力します。

&br;

* 記述例

** log.pxml

{{{
<?xml version="1.0" encoding="utf-8"?>
<px>
    <logger>

        <!-- ログレベル設定
            以下のログレベルが設定可能です。

            TRACE
            DEBUG
            INFO
            WARNING
            ERROR
            FATAL
        -->
        <loglevel>TRACE</loglevel>

        <!-- 出力チャンネル設定 -->
        <!-- 出力したいチャンネルタグを作成し値をtrueまたはyesに設定してください。 -->
        <channel>
            <default>true</default>
            <example>false</example>
        </channel>

        <!-- ログ出力設定 -->
        <loggers>

            <!-- チャンネル単位で設定を行います -->
            <default>

                <!-- ファイル出力 -->
                <logger>

                    <!-- ログクラス名 -->
                    <name>xFrameworkPX_Log_LogFile</name>

                    <!-- ログクラスのクラスファイルへのパス -->
                    <path>/Log/LogFile.php</path>

                    <!-- パラメータ設定 -->
                    <params>

                        <!-- 出力ログファイル名 -->
                        <filename>Log.log</filename>

                        <!-- クォータ設定 -->
                        <quota>

                            <!-- 日付別 -->
                            <!--
                                この設定の値をtrueまたはyesにするとログファイルを日付ごとに出力します。
                                ファイル名は設定したファイル名+出力した日付になります。
                            -->
                            <date>true</date>

                            <!-- ファイルサイズ(byte) -->
                            <!--
                                ここでファイルサイズを指定すると、出力されるログファイルのサイズが指定したファイルサイズ以上になるときログを新規ファイルで出力します。
                                古いログファイルについてはファイル名がファイル名+数字の形式に変更されます。

                                ファイルサイズを未設定にするか、0を設定すると上記の処理は行いません。
                            -->
                            <size>1024</size>

                            <!-- ファイル世代制限 -->
                            <!--
                                ファイルサイズの制限により保存される古いログファイルについて
                                現行のログファイルを含めて何世代保存するかを設定します。

                                例えばここで5を指定すると現行のログファイルと4世代前までのログファイルが残り、
                                5世代以前のログファイルについては自動的に削除されます。

                                この設定はファイルサイズの設定同様、未設定にするか0を設定することで世代の制限を無制限にできます。
                            -->
                            <limit>10</limit>
                        </quota>
                    </params>
                </logger>

                <!-- ログメール送信 -->
                <logger>

                    <!-- ログクラス名 -->
                    <name>xFrameworkPX_Log_LogMail</name>

                    <!-- ログクラスのクラスファイルへのパス -->
                    <path>/Log/LogMail.php</path>

                    <!-- パラメータ設定 -->
                    <params>

                        <!-- 件名設定 -->
                        <subject>Test Log Mail</subject>

                        <!-- 送信元メールアドレス設定 -->
                        <from>xFrameworkPX@xenophy.com</from>

                        <!-- 送信先メールアドレス設定 -->
                        <!-- addr要素を複数定義することで複数の送信先アドレスを設定できます -->
                        <to>
                            <addr>xxxxx@xenophy.com</addr>
                        </to>
                    </params>
                </logger>

                <!-- FirePHP表示 -->
                <logger>

                    <!-- ログクラス名 -->
                    <name>xFrameworkPX_Log_LogFirePHP</name>

                    <!-- ログクラスのクラスファイルへのパス -->
                    <path>/Log/LogFirePHP.php</path>
                </logger>
            </default>

            <example>
                <logger>
                    <name>xFrameworkPX_Log_LogFile</name>
                    <path>/Log/LogFile.php</path>
                    <params>
                        <filename>exampleLog.log</filename>
                        <quota>
                            <date>false</date>
                            <size></size>
                            <limit></limit>
                        </quota>
                    </params>
                </logger>
            </example>
        </loggers>
    </logger>
</px>
}}}

&br;

** exampleAction コントローラークラス

{{{
class exampleAction extends xFrameworkPX_Controller_Action
{
    // {{{ props

    // {{{ モジュール設定

    public $modules = array(

        // {{{ exampleModuleクラスの設定

        'exampleModule' => array(

            // コネクション名設定
            'conn' => default
        )

        // }}} 

    );

    // }}} 

    // }}} 
    // {{{ execute

    public function execute()
    {

        // {{{ defaultチャンネルで出力

        // 上記の設定の場合ファイル、メール、FirePHPでそれぞれログを出力する

        $this->log->trace('test log1');     // メッセージが'test log1'でログレベルがTRACEのログを出力
        $this->log->debug('test log2');     // メッセージが'test log2'でログレベルがDEBUGのログを出力
        $this->log->info('test log3');      // メッセージが'test log3'でログレベルがINFOのログを出力
        $this->log->warning('test log4');   // メッセージが'test log4'でログレベルがWARNINGのログを出力
        $this->log->error('test log5');     // メッセージが'test log5'でログレベルがERRORのログを出力
        $this->log->fatal('test log6');     // メッセージが'test log6'でログレベルがFATALのログを出力

        // }}} 
        // {{{ exampleチャンネルで出力

        // 上記の設定の場合'example'チャンネルが無効になっているためログは出力されません

        $this->log->trace('test log1', 'example');     // メッセージが'test log1'でログレベルがTRACEのログを出力
        $this->log->debug('test log2', 'example');     // メッセージが'test log2'でログレベルがDEBUGのログを出力
        $this->log->info('test log3', 'example');      // メッセージが'test log3'でログレベルがINFOのログを出力
        $this->log->warning('test log4', 'example');   // メッセージが'test log4'でログレベルがWARNINGのログを出力
        $this->log->error('test log5', 'example');     // メッセージが'test log5'でログレベルがERRORのログを出力
        $this->log->fatal('test log6', 'example');     // メッセージが'test log6'でログレベルがFATALのログを出力

        // }}} 

    }

    // }}} 

}

    // }}} 
}
}}}

&br;

----
