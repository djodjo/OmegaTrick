* tbl_uriageとtbl_customerのINNER JOIN(3)

hasOneでtbl_uriageとtbl_customerを内部結合します。
[[tbl_uriageとtbl_customerのINNER JOIN(1)>#tutorial_51.hasOne1>internal]]で行った操作と同じ結果になりますが、hasOneの指定方法が異なります。ここでは、tbl_customer用のモジュールは作成せずに、hasOneに直接テーブル名を指定します。


&img(./resources/images/tutorial/hasOne3.png){tbl_uriageとtbl_customerのINNER JOIN(3)};

このチュートリアルでは、次の操作を行います。

+ モジュール作成
+ アクション作成
+ テンプレート作成
+ 動作確認



* 01.モジュール作成

モジュールディレクトリ下に、'''''uriage.php'''''を作成します。

** uriage.php
{{{
<?php

class uriage extends xFrameworkPX_Model
{
    public $hasOne = 'tbl_customer';

    public function test()
    {
        return $this->get('all',array(
            'fields' => array(
                'tbl_uriage.id as id',
                'tbl_uriage.date as date',
                'tbl_uriage.customer_id as customer_id',
                'tbl_customer.id as customer_id_org',
                'tbl_customer.name as customer_name',
            )
        ));
    }

}

}}}

[[tbl_uriageとtbl_customerのINNER JOIN(2)>#tutorial_52.hasOne2>internal]]のようにforeignKeyを指定する場合は、配列で指定します。
{{{
public $hasOne = array(
    'tbl_customer' => array(
        'foreignKey' => 'customer_id'
    )
);
}}}

※チュートリアル用に'''''modules/Docs/Tutorial/Model/Association/hasOne3/'''''に同一のコードがあります。


* 02.アクションクラスファイル作成
Webルートに、'''''.hasOne3.php'''''を作成します。

{{{
<?php

class hasOne3 extends xFrameworkPX_Controller_Action
{

    public $modules = array(
        'uriage',
    );

    public function execute() {

        // テストした結果（配列）を格納
        $this->set('test', $this->uriage->test());

    }

}
}}}

※チュートリアル用に'''''bindtransfer/docs/tutorial/model/association/'''''に同一のコードがあります。



* 03.テンプレート作成
アクションクラスファイルと同じ位置に、'''''hasOne3.html'''''を作成します。

{{{
<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml" lang="ja" xml:lang="ja">
<head>
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="content-script-Type" content="text/javascript" />
    <meta http-equiv="content-style-type" content="text/css" />
    <title>tbl_uriageとtbl_customerのINNER JOIN(3)</title>
</head>
<body>

    <h1>tbl_uriageとtbl_customerのINNER JOIN(3)</h1>

    <table border="1">
    <tr>
        <th>売上No</th>
        <th>日付</th>
        <th>売上表.顧客CD</th>
        <th>顧客表.顧客CD</th>
        <th>顧客名</th>
    </tr>
    <!--{foreach from=$test item=item key=key}-->
    <tr>
        <td><!--{$item.id}--></td>
        <td><!--{$item.date}--></td>
        <td><!--{$item.customer_id}--></td>
        <td><!--{$item.customer_id_org}--></td>
        <td><!--{$item.customer_name}--></td>
    </tr>
    <!--{/foreach}-->
    </table>

</body>
</html>
}}}


※チュートリアル用に'''''bindtransfer/docs/tutorial/model/association/'''''に同一のコードがあります。



* 動作確認
作成したアクションにブラウザからアクセスして、動作を確認してください。

hasOneに文字列でモジュール名を設定した場合、INNER JOINの結合条件に用いられるキーは、次の通りになります。

|~キー|~フィールド名|
|primaryKey|id|
|foreignKey|customer_id|

foreignKeyは、'''''テーブル名+_id'''''に自動的に設定されます。
このアソシエーション設定により実行されるSQLは下記の通りです。

{{{
SELECT
    tbl_uriage.id AS id,
    tbl_uriage.date AS DATE,
    tbl_uriage.customer_id AS customer_id,
    tbl_customer.id AS customer_id_org,
    tbl_customer.name AS customer_name
FROM
    tbl_uriage
    INNER JOIN
    tbl_customer ON
    tbl_uriage.customer_id = tbl_customer.id
}}}

また、期待される結果は次の通りです。

|~売上No|~日付|~売上表.顧客CD|~顧客表.顧客CD|~顧客名|
|1|2001-05-27 00:00:00|105|105|福岡商事|
|2|2001-05-27 00:00:00|101|101|二島商店|
|3|2001-05-27 00:00:00|103|103|大阪物産|
|4|2001-06-27 00:00:00|102|102|姫路商事|
|5|2001-06-27 00:00:00|104|104|神戸商店|

* サンプル実行

下記のボタンから、ここまでのサンプルを実行することができます。

[[&img(./resources/images/demo.gif){サンプル画像};>./tutorial/association/hasOne3.html>external]]

** サンプル格納位置

'''bindtransfer/docs/tutorial/model/association/'''
