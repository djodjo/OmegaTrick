* 概要

xFrameworkPXは、オープンソースのPHP上で動作するアプリケーションフレームワークです。個々のクラスは、大きく分けて2つの種類があり、画面を形成するためのコントローラーやモデル、ビューといったクラス群とそれぞれの機能ごとに利用できるクラスがあります。機能ごとのクラスは、xFrameworkPXに依存せず利用することも可能です。



* 当ドキュメントが前提とする技能レベル

WEBアプリケーション開発経験が全くないユーザに，当ドキュメントは向いておりません。HTMLとWeb開発一般の用語には精通している必要があり，フォーム，スクリプト，データアクセスなど，対話型のWebアプリケーションに関する基本概念を理解している必要があります。また、当ドキュメントを順を追って読み進めることで、xFrameworkPXの様々な機能や実装方法を学ぶことができます。



* 共同開発での問題点

今日のWEBアプリケーション開発において、必ずしも開発を一人の技術者で行うとは限りません。複数人の技術者で開発を行う上での問題点として下記のようなことが考えられます。

:パラレル作業（並行作業）|複数人の開発者やデザイナが作業を行うため，モデルとビューを分離する必要があります。
:ロジックの重複|複数の開発者がコードを各自記述していくため，同じような処理が開発者毎に記述され，結果としてロジックの重複が発生します。
:コーディングの差異|コーディング規約を作成したとしても，ロジックの作り方は開発者によって異なります。共同開発ではこの差異を最小限に抑えなくては，他人の作成したロジックを解析するという制作作業以外の労力も増えます。
:ソースコードとロジックの統一性|ソースコードの記述方法以外に，データ取得方法や画面遷移など処理としては統一された形が望ましいですが，複数の開発者が記述することで統一性を持って開発をすること自体に労力がかかります。

これらの問題を解決するための一つの方法が、フレームワークを利用することです。フレームワークとは「枠組み」を意味します。xFrameworkPXはWebアプリケーションの実装基板となるフレームワークです。Webアプリケーションを開発する上でよく使われる機能などがライブラリ化されているだけでなく、実装基板として一定のルールで動作するため，共同作業での問題を解消します。

さらに、Webアプリケーションを開発しはじめるときに、一からすべてを作る必要がなくなるという利点もあります。フレームワークを利用することにより、コーディングの差分を取るためのロジック解析という無駄な手間を省くことができます。また、毎回作成しなくてはならない仕組みを準備しなくて済むので、アプリケーションとして新規に実装する部分の開発に注力することができます。



* xFrameworkPXの特徴

xFrameworkPXは、404駆動型のフレームワークです。404駆動型とは404エラー発生時、つまりドキュメントルートにコンテンツが存在しない場合にフレームワークが起動し、処理が実行される仕組みのことです。これにより、xFrameworkPXを利用しないシステムや、既存のシステムを運用したまま、部分的にxFrameworkPXを利用して開発を行うこともできます。

また、xFrameworkPXはMVCX型のフレームワークです。まずMVCとは、Model、 View、 Controller（モデル・ビュー・コントローラ）の頭文字をとったものです。
モデル、ビュー、コントローラーは処理の中でそれぞれ以下の役割を担っています。

:モデル|ビジネスロジックの実装
:ビュー|表示
:コントローラー|画面遷移制御

ユーザからの入力はコントローラーが受け取り、判断して、何らかの処理が必要な場合はモデルを呼び出します。その後、出力が必要な場合はコントローラーがビューを呼び出します。モデルはロジックのみを実装し画面出力などのユーザーに見える部分の処理は行いません。モデルで実装したロジックの処理結果はコントローラーを介してビューに渡され、ビューが画面に出力します。従来のMVCでは処理に対してコントローラーはひとつですが、xFrameworkPXではこのコントローラーが複数存在するものを''MVCX型''と呼んでいます。







* 仮想スクリーン

仮想スクリーンとは実在しないページを仮想的にページが存在しているかのように振る舞う、xFrameworkPXにより作り出される画面を指します。404駆動型のため、実際にドキュメントルートにコンテンツは存在しませんが、画面を仮想的に作成するため''仮想スクリーン''と呼びます。



* アクション

xFrameworkPXの最小の動作単位をアクションと呼んでいます。アクションは、ひとつのコントローラークラスに対応しており、開発者はこのアクションで行われる処理をモデルに実装することと、その処理の流れをコントローラーに定義していくことがメインの作業になります。



* pxmlファイル

pxmlファイルはxFrameworkPXの各種設定を行うときに使用するXMLファイルです。pxmlファイルの拡張子は.pxmlになります。



* コンポーネント

xFrameworkPXはコントローラーの機能を簡単に拡張することができる仕組みを提供しています。開発者はコントローラーの機能を拡張するためのクラスライブラリを作成し、拡張したいコントローラーにそのクラスライブラリを使用するための定義を記述するだけで簡単にコントローラーの基本機能を拡張することができます。
xFrameworkPXではこのクラスライブラリのことを''コンポーネント''と呼びます。

''コンポーネントの詳細については「コントローラー」の項目を参照してください。''



* ビヘイビア

xFrameworkPXはモデルについても、コントローラーと同様に拡張用のクラスライブラリを作成しモジュールに使用するための定義を記述するだけで、そのモジュールの機能を簡単に拡張することができます。
xFrameworkPXではこのクラスライブラリのことを''ビヘイビア''と呼びます。

''ビヘイビアの詳細については「モジュール（モデル）」の項目を参照してください。''



* LiveRecord

xFrameworkPXには''LiveRecord''と呼ばれるデータベースにアクセスするための機能があります。''LiveRecord''を使用することでモデルからメソッドを呼び出すだけで簡単にデータベースへアクセスすることができます。

''LiveRecordについては「モジュール（モデル）」の項目を参照してください。''


* RapidDrive

一般的なWebアプリケーションの機能において、よく見られる処理と画面遷移のパターンというものがいくつか存在します。ですがそれらを1から実装しようとすると簡単なものでもある程度の労力がかかります。
xFrameworkPXには、そのよく見られるパターンの機能を、いくつかの定義するだけで実装することができるスカフォールドと呼ばれる機能があります。このスカフォールドの機能を提供してくれるのが''RapidDrive''です。
